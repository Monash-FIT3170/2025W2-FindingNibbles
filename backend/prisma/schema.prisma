generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Models

model User {
  id                     Int                        @id @default(autoincrement())
  firstName              String
  lastName               String
  verifyCode             Int?
  isVerified             Boolean                    @default(false)
  email                  String                     @unique
  passwordHash           String?
  provider               String
  providerId             String?
  locations              UserLocation[]
  userDietaries          UserDietary[]
  mealPlans              UserMealPlan[]
  calorieLogs            UserCalorieLog[]
  favouriteRestaurants   UserFavouritedRestaurant[]
  userCuisinePreferences UserCuisine[]
  appliances             UserAppliance[]
  favouritedRecipes      UserFavouritedRecipe[]
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt

  @@unique([provider, providerId])
}

model UserLocation {
  id            Int     @id @default(autoincrement())
  userId        Int
  name          String  @unique // Home, Work, etc.
  streetAddress String?
  latitude      Float
  longitude     Float
  isDefault     Boolean @default(false)
  user          User    @relation(fields: [userId], references: [id])
}

model DietaryRequirement {
  id            Int           @id @default(autoincrement())
  name          String        @unique
  description   String?
  userDietaries UserDietary[]
  dishDietaries DishDietary[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model UserDietary {
  id        Int                 @id @default(autoincrement())
  userId    Int
  dietaryId Int
  user      User                @relation(fields: [userId], references: [id])
  dietary   DietaryRequirement  @relation(fields: [dietaryId], references: [id])
  recipes   RecipeUserDietary[]

  @@unique([userId, dietaryId])
}

model UserFavouritedRestaurant {
  id           Int        @id @default(autoincrement())
  userId       Int
  restaurantId Int
  user         User       @relation(fields: [userId], references: [id])
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])

  @@unique([userId, restaurantId])
}

model UserFavouritedRecipe {
  id       Int    @id @default(autoincrement())
  userId   Int
  recipeId Int
  user     User   @relation(fields: [userId], references: [id])
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@unique([userId, recipeId])
}

model UserCuisine {
  id        Int     @id @default(autoincrement())
  userId    Int
  cuisineId Int
  user      User    @relation(fields: [userId], references: [id])
  cuisine   Cuisine @relation(fields: [cuisineId], references: [id])

  @@unique([userId, cuisineId])
}

model Restaurant {
  id                 Int                        @id @default(autoincrement())
  name               String
  latitude           Float
  longitude          Float
  icon               String?
  rating             Float?
  userRatingsTotal   Int?
  priceLevel         Int?
  restaurantCuisines RestaurantCuisine[]
  favouritedBy       UserFavouritedRestaurant[]
  address  String?
  website           String?
  openingHours      Json?
  photos            Photo[]
  imageUrl          String? // Random food/restaurant image URL

  // Menu Information
  dishes             Dish[]
  menuUrl            String?       
  
  // Additional place details
  dineIn                       Boolean?
  takeout                      Boolean?
  delivery                     Boolean?
  servesBreakfast              Boolean?
  servesLunch                  Boolean?
  servesDinner                 Boolean?
  wheelchairAccessibleEntrance Boolean?

  // Metadata for our app
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  detailsUpdatedAt DateTime?
  viewCount        Int       @default(0)
  favoriteCount    Int       @default(0)
}

model Photo {
  id               String     @id @default(uuid())
  restaurant       Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId     Int
  photoReference   String // Google Places photo reference
  height           Int
  width            Int
  htmlAttributions String[]
  createdAt        DateTime   @default(now())
}

model Cuisine {
  id                 Int                 @id @default(autoincrement())
  name               String              @unique
  description        String?
  dishes             Dish[]
  restaurantCuisines RestaurantCuisine[]
  userCuisines       UserCuisine[]
  recipes            Recipe[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model RestaurantCuisine {
  id           Int        @id @default(autoincrement())
  restaurantId Int
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  cuisineId    Int
  cuisine      Cuisine    @relation(fields: [cuisineId], references: [id])
}

model Dish {
  id             Int            @id @default(autoincrement())
  name           String
  description    String?
  calories       Int?
  price          Float?
  restaurantId   Int
  restaurant     Restaurant     @relation(fields: [restaurantId], references: [id])
  cuisine        Cuisine?       @relation(fields: [cuisineId], references: [id])
  cuisineId      Int?
  dishDietaries  DishDietary[]
  mealPlanDishes MealPlanDish[]
  category       String?        // Menu category like "Appetizers", "Mains"
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // MENU STORAGE PLAN:
  // - This model will store AI-classified menu items
  // - restaurantId links dishes to specific restaurants
  // - dishDietaries stores AI dietary classifications via junction table
  // - Deduplication by (name + restaurantId) composite key
  // - createdAt preserves first upload, updatedAt tracks modifications

  @@unique([name, restaurantId]) // Prevent duplicate dishes per restaurant
}

model DishDietary {
  dishId    Int
  dietaryId Int
  dish      Dish               @relation(fields: [dishId], references: [id])
  dietary   DietaryRequirement @relation(fields: [dietaryId], references: [id])

  @@id([dishId, dietaryId])
  @@unique([dishId, dietaryId])
}

model UserMealPlan {
  id             Int            @id @default(autoincrement())
  user           User           @relation(fields: [userId], references: [id])
  userId         Int
  date           DateTime
  mealPlanDishes MealPlanDish[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model MealPlanDish {
  id         Int          @id @default(autoincrement())
  mealPlanId Int
  dishId     Int
  mealPlan   UserMealPlan @relation(fields: [mealPlanId], references: [id])
  dish       Dish         @relation(fields: [dishId], references: [id])
}

model UserCalorieLog {
  id        Int      @id @default(autoincrement())
  userId    Int
  recipeId  Int?
  mealName  String?
  recipe    Recipe?  @relation(fields: [recipeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  date      DateTime
  calories  Int
  createdAt DateTime @default(now())
}

model Appliance {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  userAppliances       UserAppliance[]
  recipeUserAppliances RecipeUserAppliance[]
}

model UserAppliance {
  id                  Int                   @id @default(autoincrement())
  userId              Int
  applianceId         Int
  user                User                  @relation(fields: [userId], references: [id])
  appliance           Appliance             @relation(fields: [applianceId], references: [id])
  RecipeUserAppliance RecipeUserAppliance[]

  @@unique([userId, applianceId])
}

model RecipeUserAppliance {
  id              Int           @id @default(autoincrement())
  recipeId        Int
  userApplianceId Int
  recipe          Recipe        @relation(fields: [recipeId], references: [id])
  appliance       UserAppliance @relation(fields: [userApplianceId], references: [id])
  Appliance       Appliance?    @relation(fields: [applianceId], references: [id])
  applianceId     Int?

  @@unique([recipeId, userApplianceId])
}

model RecipeUserDietary {
  id            Int         @id @default(autoincrement())
  recipeId      Int
  userDietaryId Int
  recipe        Recipe      @relation(fields: [recipeId], references: [id])
  dietary       UserDietary @relation(fields: [userDietaryId], references: [id])

  @@unique([recipeId, userDietaryId])
}

model Recipe {
  id                   Int                    @id @default(autoincrement())
  title                String
  description          String
  ingredients          String[]
  dietaries            RecipeUserDietary[]
  instructions         String[]
  appliances           RecipeUserAppliance[]
  favouriteBy          UserFavouritedRecipe[]
  loggedBy             UserCalorieLog[]
  calories             Int?
  estimatedTimeMinutes Int
  servings             Int
  dietaryTags          String[]
  nutritionalInfo      String[]
  difficultyLevel      String
  imageURL             String?
  cuisineId            Int
  cuisine              Cuisine                @relation(fields: [cuisineId], references: [id])
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
}
