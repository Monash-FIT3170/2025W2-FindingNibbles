import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { getErrorMessage } from 'src/utils';

interface GeminiConfig {
  model: string;
  apiKey: string;
}

interface LLMResponse {
  candidates?: Array<{
    content: {
      parts: Array<{
        text?: string;
        inlineData?: {
          mimeType: string;
          data: string;
        };
      }>;
    };
  }>;
}

@Injectable()
export class GeminiService {
  private readonly geminiConfig: GeminiConfig;

  constructor(private configService: ConfigService) {
    this.geminiConfig = {
      model: this.configService.get<string>('GOOGLE_GEMINI_API_MODEL') || '',
      apiKey: this.configService.get<string>('GOOGLE_GEMINI_API_KEY') || '',
    };
  }

  async generateContent(requestBody: any): Promise<LLMResponse> {
    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/${this.geminiConfig.model}:generateContent?key=${this.geminiConfig.apiKey}`,
      {
        body: JSON.stringify(requestBody),
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
      },
    );

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API request failed: ${response.status} ${errorText}`);
    }

    return (await response.json()) as LLMResponse;
  }

  extractResponseContent(responseJson: LLMResponse): string {
    const textContent = responseJson.candidates?.[0]?.content?.parts[0]?.text;
    if (!textContent) {
      throw new Error('No text content found in LLM response');
    }
    return textContent;
  }

  parseJsonResponse(responseContent: string): unknown {
    try {
      return JSON.parse(responseContent);
    } catch (error: any) {
      const errorMessage = getErrorMessage(error);
      throw new Error('Failed to parse LLM response: ' + errorMessage);
    }
  }

  async generateAndParseJson(requestBody: any): Promise<unknown> {
    try {
      const responseJson = await this.generateContent(requestBody);
      const responseContent = this.extractResponseContent(responseJson);
      return this.parseJsonResponse(responseContent);
    } catch (error) {
      const errorMessage = getErrorMessage(error);
      throw new Error('Failed to get response from LLM: ' + errorMessage);
    }
  }

  async generateImage(prompt: string): Promise<string> {
    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-preview-image-generation:generateContent?key=${this.geminiConfig.apiKey}`,
        {
          body: JSON.stringify({
            contents: [
              {
                role: 'user',
                parts: [{ text: prompt }],
              },
            ],
            generationConfig: {
              responseModalities: ['TEXT', 'IMAGE'],
            },
          }),
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
        },
      );

      if (!response.ok) {
        const errorText = await response.text();
        console.error(
          `Image generation API failed: ${response.status} ${errorText}`,
        );
        throw new Error(`Image generation failed: ${response.status}`);
      }

      const responseJson = (await response.json()) as LLMResponse;

      // Look for image data in response.candidates[0].content.parts
      for (const part of responseJson?.candidates?.[0]?.content?.parts || []) {
        if (part.inlineData && part.inlineData.data) {
          // Return data URL format that can be used directly in img src
          return `data:${part.inlineData.mimeType};base64,${part.inlineData.data}`;
        }
      }

      throw new Error('No image generated by Gemini');
    } catch (error) {
      const errorMessage = getErrorMessage(error);
      console.error('Error generating image with Gemini:', errorMessage);
      throw new Error('Failed to generate image: ' + errorMessage);
    }
  }
}
